func (s *cartService) AddToCartService(email string, addToCart *dto.AddToCartDTO) error {

	// 1️⃣ Find the user
	user, err := s.userRepo.GetUserByEmail(email)
	if err != nil {
		return errors.New("user not found")
	}

	// 2️⃣ Get or create the user's cart
	cart, err := s.cartRepository.GetOrCreateCart(user.ID)
	if err != nil {
		return errors.New("could not get or create cart")
	}

	// 3️⃣ Check if product already exists in cart
	cartItem, err := s.cartRepository.GetCartItem(cart.ID, addToCart.ProductID)
	if err == nil && cartItem != nil {
		// Update quantity
		cartItem.Quantity += addToCart.Quantity
		cartItem.Subtotal = float64(cartItem.Quantity) * cartItem.Price
		return s.cartRepository.UpdateCartItem(cartItem)
	}

	// 4️⃣ Otherwise, add new cart item
	product, err := s.cartRepository.GetProductByID(addToCart.ProductID)
	if err != nil {
		return errors.New("product not found")
	}

	newItem := &cartrepository.CartItem{
		CartID:    cart.ID,
		ProductID: product.ID,
		Quantity:  addToCart.Quantity,
		Price:     product.BasePrice,
		Subtotal:  float64(addToCart.Quantity) * product.BasePrice,
	}

	return s.cartRepository.CreateCartItem(newItem)
}


package cartrepository

import (
	"github.com/ak-repo/ecommerce-gin/internal/models"
	"gorm.io/gorm"
)

type cartRepo struct {
	DB *gorm.DB
}

func NewCartRepository(db *gorm.DB) CartRepository {
	return &cartRepo{DB: db}
}

// Get or create a cart for the user
func (r *cartRepo) GetOrCreateCart(userID uint) (*models.Cart, error) {
	var cart models.Cart
	err := r.DB.Preload("CartItems").FirstOrCreate(&cart, models.Cart{UserID: userID}).Error
	return &cart, err
}

// Get a specific cart item
func (r *cartRepo) GetCartItem(cartID, productID uint) (*models.CartItem, error) {
	var item models.CartItem
	err := r.DB.Where("cart_id = ? AND product_id = ?", cartID, productID).First(&item).Error
	if err != nil {
		return nil, err
	}
	return &item, nil
}

// Create new cart item
func (r *cartRepo) CreateCartItem(item *models.CartItem) error {
	return r.DB.Create(item).Error
}

// Update existing cart item
func (r *cartRepo) UpdateCartItem(item *models.CartItem) error {
	return r.DB.Save(item).Error
}

// Get product by ID (for price)
func (r *cartRepo) GetProductByID(productID uint) (*models.Product, error) {
	var product models.Product
	err := r.DB.First(&product, productID).Error
	if err != nil {
		return nil, err
	}
	return &product, nil
}
