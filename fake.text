// GET /user/address/:address_id
func (h *UserHandler) ShowAddressForm(ctx *gin.Context) {
    addressID := ctx.Param("address_id")
    email, _ := ctx.Get("email")
    emailStr := email.(string)

    user, err := h.userService.UserProfileService(emailStr)
    if err != nil {
        ctx.String(http.StatusInternalServerError, "user not found")
        return
    }

    // default: new address
    var addr *models.Address = nil
    if addressID != "" && addressID != "0" {
        id, _ := strconv.Atoi(addressID)
        for _, v := range user.Addresses {
            if v.ID == uint(id) {
                addr = &v
                break
            }
        }
    }

    ctx.HTML(http.StatusOK, "pages/user/address.html", gin.H{
        "User":    user,
        "Address": addr,
    })
}

// POST /user/address/:address_id
func (h *UserHandler) UserAddressHandler(ctx *gin.Context) {
    addressID := ctx.Param("address_id")
    email, _ := ctx.Get("email")
    emailStr := email.(string)

    var input models.Address
    if err := ctx.ShouldBind(&input); err != nil {
        ctx.String(http.StatusBadRequest, "binding failed: "+err.Error())
        return
    }

    // Set UserID from logged-in user
    user, _ := h.userService.GetUserByEmail(emailStr)
    input.UserID = user.ID

    // Create or Update
    if addressID == "0" {
        if err := h.userService.AddUserProfile(&input); err != nil {
            ctx.String(http.StatusBadRequest, "adding failed: "+err.Error())
            return
        }
    } else {
        if err := h.userService.UpdateUserProfile(addressID, &input); err != nil {
            ctx.String(http.StatusBadRequest, "updating failed: "+err.Error())
            return
        }
    }

    ctx.Redirect(http.StatusSeeOther, "/user/profile")
}
